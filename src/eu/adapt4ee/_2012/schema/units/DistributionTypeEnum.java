//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.6 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2014.07.02 at 11:00:40 PM CEST 
//


package eu.adapt4ee._2012.schema.units;

import javax.xml.bind.annotation.XmlEnum;
import javax.xml.bind.annotation.XmlEnumValue;
import javax.xml.bind.annotation.XmlType;


/**
 * <p>Java class for distributionTypeEnum.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <p>
 * <pre>
 * &lt;simpleType name="distributionTypeEnum">
 *   &lt;restriction base="{http://www.w3.org/2001/XMLSchema}NMTOKEN">
 *     &lt;enumeration value="Constant"/>
 *     &lt;enumeration value="Beta"/>
 *     &lt;enumeration value="Binomial"/>
 *     &lt;enumeration value="Cauchy"/>
 *     &lt;enumeration value="ChiSquared"/>
 *     &lt;enumeration value="Constant"/>
 *     &lt;enumeration value="EnumeratedContinuous"/>
 *     &lt;enumeration value="EnumeratedDiscrete"/>
 *     &lt;enumeration value="Exponential"/>
 *     &lt;enumeration value="F"/>
 *     &lt;enumeration value="Gamma"/>
 *     &lt;enumeration value="Geometric"/>
 *     &lt;enumeration value="Hypergeometric"/>
 *     &lt;enumeration value="Levy"/>
 *     &lt;enumeration value="LogNormal"/>
 *     &lt;enumeration value="Normal"/>
 *     &lt;enumeration value="Pareto"/>
 *     &lt;enumeration value="Pascal"/>
 *     &lt;enumeration value="Poisson"/>
 *     &lt;enumeration value="T"/>
 *     &lt;enumeration value="Triangular"/>
 *     &lt;enumeration value="UniformContinuous"/>
 *     &lt;enumeration value="UniformDiscrete"/>
 *     &lt;enumeration value="Weibull"/>
 *     &lt;enumeration value="Zipf"/>
 *     &lt;enumeration value="Other"/>
 *   &lt;/restriction>
 * &lt;/simpleType>
 * </pre>
 * 
 */
@XmlType(name = "distributionTypeEnum")
@XmlEnum
public enum DistributionTypeEnum {


    /**
     * This distribution always samples the provided (constant) value.
     * 
     */
    @XmlEnumValue("Constant")
    CONSTANT("Constant"),

    /**
     * This continuous distribution takes as arguments: alpha and beta.
     * 
     */
    @XmlEnumValue("Beta")
    BETA("Beta"),

    /**
     * This discrete distribution takes as arguments: trials and p.
     * 
     */
    @XmlEnumValue("Binomial")
    BINOMIAL("Binomial"),

    /**
     * This continuous distribution takes as arguments: median and scale.
     * 
     */
    @XmlEnumValue("Cauchy")
    CAUCHY("Cauchy"),

    /**
     * This continuous distribution takes as argument: degreesOfFreedom.
     * 
     */
    @XmlEnumValue("ChiSquared")
    CHI_SQUARED("ChiSquared"),

    /**
     * This continuous distribution takes as arguments: pmf.
     * 
     */
    @XmlEnumValue("EnumeratedContinuous")
    ENUMERATED_CONTINUOUS("EnumeratedContinuous"),

    /**
     * This discrete distribution takes as arguments: pmf.
     * 
     */
    @XmlEnumValue("EnumeratedDiscrete")
    ENUMERATED_DISCRETE("EnumeratedDiscrete"),

    /**
     * This continuous distribution takes as argument: mean.
     * 
     */
    @XmlEnumValue("Exponential")
    EXPONENTIAL("Exponential"),

    /**
     * This continuous distribution takes as arguments: numeratorDegreesOfFreedom and denominatorDegreesOfFreedom.
     * 
     */
    F("F"),

    /**
     * This continuous distribution takes as arguments: shape and scale.
     * 
     */
    @XmlEnumValue("Gamma")
    GAMMA("Gamma"),

    /**
     * This discrete distribution takes as argument: p.
     * 
     */
    @XmlEnumValue("Geometric")
    GEOMETRIC("Geometric"),

    /**
     * This discrete distribution takes as arguments: populationSize, numberOfSuccesses and sampleSize.
     * 
     */
    @XmlEnumValue("Hypergeometric")
    HYPERGEOMETRIC("Hypergeometric"),

    /**
     * This continuous distribution takes as arguments: mu and c.
     * 
     */
    @XmlEnumValue("Levy")
    LEVY("Levy"),

    /**
     * This continuous distribution takes as arguments: scale and shape.
     * 
     */
    @XmlEnumValue("LogNormal")
    LOG_NORMAL("LogNormal"),

    /**
     * This continuous distribution takes as arguments: mean and sd.
     * 
     */
    @XmlEnumValue("Normal")
    NORMAL("Normal"),

    /**
     * This continuous distribution takes as arguments: scale and shape.
     * 
     */
    @XmlEnumValue("Pareto")
    PARETO("Pareto"),

    /**
     * This discrete distribution takes as arguments: r and p.
     * 
     */
    @XmlEnumValue("Pascal")
    PASCAL("Pascal"),

    /**
     * This discrete distribution takes as arguments: alpha and beta.
     * 
     */
    @XmlEnumValue("Poisson")
    POISSON("Poisson"),

    /**
     * This continuous distribution takes as argument: denominatorDegreesOfFreedom.
     * 
     */
    T("T"),

    /**
     * This continuous distribution takes as arguments: a, b and c.
     * 
     */
    @XmlEnumValue("Triangular")
    TRIANGULAR("Triangular"),

    /**
     * This continuous distribution takes as arguments: lower and upper.
     * 
     */
    @XmlEnumValue("UniformContinuous")
    UNIFORM_CONTINUOUS("UniformContinuous"),

    /**
     * This discrete distribution takes as arguments: lower and upper.
     * 
     */
    @XmlEnumValue("UniformDiscrete")
    UNIFORM_DISCRETE("UniformDiscrete"),

    /**
     * This continuous distribution takes as arguments: alpha and beta.
     * 
     */
    @XmlEnumValue("Weibull")
    WEIBULL("Weibull"),

    /**
     * This discrete distribution takes as arguments: numberOfElements and exponent.
     * 
     */
    @XmlEnumValue("Zipf")
    ZIPF("Zipf"),

    /**
     * This distribution may take any argument, including: type.
     * 
     */
    @XmlEnumValue("Other")
    OTHER("Other");
    private final String value;

    DistributionTypeEnum(String v) {
        value = v;
    }

    public String value() {
        return value;
    }

    public static DistributionTypeEnum fromValue(String v) {
        for (DistributionTypeEnum c: DistributionTypeEnum.values()) {
            if (c.value.equals(v)) {
                return c;
            }
        }
        throw new IllegalArgumentException(v);
    }

}
