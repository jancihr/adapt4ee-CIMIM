//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.6 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2014.07.02 at 11:00:40 PM CEST 
//


package eu.adapt4ee._2012.schema.units;

import javax.xml.bind.annotation.XmlEnum;
import javax.xml.bind.annotation.XmlEnumValue;
import javax.xml.bind.annotation.XmlType;


/**
 * <p>Java class for efficiencyTypeEnum.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <p>
 * <pre>
 * &lt;simpleType name="efficiencyTypeEnum">
 *   &lt;restriction base="{http://www.w3.org/2001/XMLSchema}NMTOKEN">
 *     &lt;enumeration value="COP"/>
 *     &lt;enumeration value="EER"/>
 *     &lt;enumeration value="SEER"/>
 *     &lt;enumeration value="AFUE"/>
 *     &lt;enumeration value="HSPF"/>
 *     &lt;enumeration value="effectiveness"/>
 *     &lt;enumeration value="EnergyFactor"/>
 *     &lt;enumeration value="ThermalEff"/>
 *     &lt;enumeration value="MotorEff"/>
 *     &lt;enumeration value="FanEff"/>
 *     &lt;enumeration value="MechanicalEff"/>
 *     &lt;enumeration value="BoilerEff"/>
 *     &lt;enumeration value="kWPerTon"/>
 *     &lt;enumeration value="kWPerkW"/>
 *     &lt;enumeration value="BTUPerHourPerF"/>
 *     &lt;enumeration value="kWPerC"/>
 *   &lt;/restriction>
 * &lt;/simpleType>
 * </pre>
 * 
 */
@XmlType(name = "efficiencyTypeEnum")
@XmlEnum
public enum EfficiencyTypeEnum {


    /**
     * Coefficient of Performance
     * 
     */
    COP("COP"),

    /**
     * Energy Efficiency Ratio
     * 
     */
    EER("EER"),

    /**
     * Seasonal Energy Efficiency Ratio
     * 
     */
    SEER("SEER"),

    /**
     * Annual Fuel Utilization Efficiency
     * 
     */
    AFUE("AFUE"),

    /**
     * Heating Seasonal Performance Factor
     * 
     */
    HSPF("HSPF"),
    @XmlEnumValue("effectiveness")
    EFFECTIVENESS("effectiveness"),
    @XmlEnumValue("EnergyFactor")
    ENERGY_FACTOR("EnergyFactor"),

    /**
     * Thermal Efficiency
     * 
     */
    @XmlEnumValue("ThermalEff")
    THERMAL_EFF("ThermalEff"),

    /**
     * Motor Efficiency
     * 
     */
    @XmlEnumValue("MotorEff")
    MOTOR_EFF("MotorEff"),

    /**
     * Fan Efficiency
     * 
     */
    @XmlEnumValue("FanEff")
    FAN_EFF("FanEff"),

    /**
     * Mechanical Efficiency
     * 
     */
    @XmlEnumValue("MechanicalEff")
    MECHANICAL_EFF("MechanicalEff"),

    /**
     * Boiler Efficiency
     * 
     */
    @XmlEnumValue("BoilerEff")
    BOILER_EFF("BoilerEff"),
    @XmlEnumValue("kWPerTon")
    K_W_PER_TON("kWPerTon"),
    @XmlEnumValue("kWPerkW")
    K_W_PERK_W("kWPerkW"),
    @XmlEnumValue("BTUPerHourPerF")
    BTU_PER_HOUR_PER_F("BTUPerHourPerF"),
    @XmlEnumValue("kWPerC")
    K_W_PER_C("kWPerC");
    private final String value;

    EfficiencyTypeEnum(String v) {
        value = v;
    }

    public String value() {
        return value;
    }

    public static EfficiencyTypeEnum fromValue(String v) {
        for (EfficiencyTypeEnum c: EfficiencyTypeEnum.values()) {
            if (c.value.equals(v)) {
                return c;
            }
        }
        throw new IllegalArgumentException(v);
    }

}
